#include "ANSI_Encoding.h"
#include <string>

ANSI_Encoding::ANSI_Encoding()
{
	additionalCharacters =
	{ {'¿', 192}, {'¡', 193}, {'¬', 194}, {'√', 195}, {'ƒ', 196}, {'≈', 197}, 
	  {'∆', 198}, {'«', 199}, {'»', 200}, {'…', 201}, {' ', 202}, {'À', 203}, {'Ã', 204}, {'Õ', 205}, {'Œ', 206}, {'œ', 207}, 
	  {'–', 208}, {'—', 209}, {'“', 210}, {'”', 211}, {'‘', 212}, {'’', 213}, {'÷', 214}, {'◊', 215}, {'ÿ', 216}, {'Ÿ', 217}, 
	  {'⁄', 218}, {'€', 219}, {'‹', 220}, {'›', 221}, {'ﬁ', 222}, {'ﬂ', 223}, {'‡', 224}, {'·', 225}, {'‚', 226}, {'„', 227}, 
	  {'‰', 228}, {'Â', 229}, {'Ê', 230}, {'Á', 231}, {'Ë', 232}, {'È', 233}, {'Í', 234}, {'Î', 235}, {'Ï', 236}, {'Ì', 237}, 
	  {'Ó', 238}, {'Ô', 239}, {'', 240}, {'Ò', 241}, {'Ú', 242}, {'Û', 243}, {'Ù', 244}, {'ı', 245}, {'ˆ', 246}, {'˜', 247}, 
	  {'¯', 248}, {'˘', 249}, {'˙', 250}, {'˚', 251}, {'¸', 252}, {'˝', 253}, {'˛', 254}, {'ˇ', 255}
	};

	/*{'Ä', 128}, { 'Å', 129 }, { 'Ç', 130 }, { 'É', 131 }, { 'Ñ', 132 }, { 'Ö', 133 }, { 'Ü', 134 }, { 'á', 135 }, { 'à', 136 }, { 'â', 137 },
	{ 'ä', 138 }, { 'ã', 139 }, { 'å', 140 }, { 'ç', 141 }, { 'é', 142 }, { 'è', 143 }, { 'ê', 144 }, { 'ë', 145 }, { 'í', 146 }, { 'ì', 147 },
	{ 'î', 148 }, { 'ï', 149 }, { 'ñ', 150 }, { 'ó', 151 }, { '\0', 152 }, { 'ô', 153 }, { 'ö', 154 }, { 'õ', 155 }, { 'ú', 156 }, { 'ù', 157 },
	{ 'û', 158 }, { 'ü', 159 }, { '†', 160 }, { '°', 161 }, { '¢', 162 }, { 'é', 163 }, { '§', 164 }, { '•', 165 }, { '¶', 166 }, { 'ß', 167 },
	{ '®', 168 }, { '©', 169 }, { '™', 170 }, { '´', 171 }, { '¨', 172 }, { ' ', 173 }, { 'Æ', 174 }, { 'Ø', 175 }, { '∞', 176 }, { '±', 177 },
	{ '≤', 178 }, { '≥', 179 }, { '¥', 180 }, { 'µ', 181 }, { '∂', 182 }, { '∑', 183 }, { '∏', 184 }, { 'π', 185 }, { '∫', 186 }, { 'ª', 187 },
	{ 'º', 188 }, { 'Ω', 189 }, { 'æ', 190 }, { 'ø', 191 },*/
}

void ANSI_Encoding::EncodingHelp()
{
	// Info about ANSI
}

void ANSI_Encoding::MessageEncoding(std::string message)
{
	symbolAndCode.clear();

	Data data;

	for (int i = 0; i < message.length(); i++)
	{
		data.symbol = message[i];

		if(int(message[i] >= 0))
		{
			data.code = int(message[i]);
		}
		else
		{

			if(int(message[i]) + 16 > -17)
			{
				data.code = additionalCharacters[message[i] + 16];
			}
			else
			{
				data.code = additionalCharacters[message[i] + 64];
			}

		}

		symbolAndCode.push_back(data);
	}

}

void ANSI_Encoding::MessageDecoding(std::string message)
{
	symbolAndCode.clear();

	Data data;

	std::istringstream codeFlow(message);

	int n;

	while (codeFlow >> n)
	{
		data.code = n;

		if(n < 192)
		{
			data.symbol = char(n);
		}
		else
		{

			for(const auto& elem: additionalCharacters)
			{

				if(elem.second == n)
				{
					data.symbol = elem.first;
					break;
				}

			}

		}

		symbolAndCode.push_back(data);
	}

}

std::string ANSI_Encoding::GetEncodedMessage()
{

	std::string result;

	for (const auto& elem : symbolAndCode)
	{
		result += std::to_string(elem.code);
		result += " ";
	}

	return result;
}

std::string ANSI_Encoding::GetDecodedMessage()
{
	std::string result;

	for (const auto& elem : symbolAndCode)
	{
		result += elem.symbol;
	}

	return result;
}

void ANSI_Encoding::OutputToTheConsole()
{

	for (const auto& elem : symbolAndCode)
	{
		std::cout << elem.symbol << "     " << elem.code << std::endl;
	}

}